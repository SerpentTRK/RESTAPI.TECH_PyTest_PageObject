{"name": "test_issues_get_created_user_by_id_032", "status": "failed", "statusDetails": {"message": "AssertionError: \nRequested Url: https://restapi.tech/api/issues/users/5128 \nStatus code: 202 \nResponse time: 0.047806999999999995 seconds \nResponse headers: {'Server': 'nginx/1.24.0', 'Date': 'Fri, 19 Jul 2024 18:54:24 GMT', 'Content-Type': 'application/json', 'Content-Length': '72', 'Connection': 'keep-alive'} \nResponse body: None", "trace": "create_and_delete_user = <function create_and_delete_user.<locals>._create_user at 0x0000022910D553A0>\n\n    @pytest.mark.users\n    def test_issues_get_created_user_by_id_032(create_and_delete_user):\n        \"\"\"\n        Это специальный тест, где мы получим заведомо не верный ответ от сервера.\n        Получить данные пользователя по его user_id\n    \n        Ожидаемый результат:\n            Статус-код 201;\n            Время ответа сервера - не превышает 500ms;\n            Схема JSON-ответа соответствует Требованиям;\n            Response header \"Content-Type\": \"application/json\"\n            Response header \"Connection\": \"keep-alive\"\n            Новая запись JSON ответа соответствует тому, что мы отправляли при регистрации + содержит Id созданного юзера.\n    \n        Полученный результат: статус код 202 (запрос был принят на обработку, но она не завершена),\n            ключи first_name и last_name не соответствуют тому, что мы ожидали.\n        \"\"\"\n        response_object_create_user = create_and_delete_user(user_data)\n        user_id = response_object_create_user.json().get(\"user_id\")\n    \n        #Переходим к самому тесту\n        response_object = requests.get(baseUrl_issues_users + f\"/{user_id}\")\n        api = IssuesGetCreatedUserById(response_object)\n>       api.run_tests()\n\ntests\\users\\test_users.py:355: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\test_workspace\\users\\_issues_get_created_user_by_id_032.py:13: in run_tests\n    self.validate_status_code(200)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.test_workspace.users._issues_get_created_user_by_id_032.IssuesGetCreatedUserById object at 0x0000022910C255B0>, status_code = 200\n\n    def validate_status_code(self, status_code):\n        \"\"\"\n        Валидация статус-кода\n        \"\"\"\n        if isinstance(status_code, list):\n            assert self.response.status_code in status_code, self\n        else:\n>           assert self.response.status_code == status_code, self\nE           AssertionError: \nE           Requested Url: https://restapi.tech/api/issues/users/5128 \nE           Status code: 202 \nE           Response time: 0.047806999999999995 seconds \nE           Response headers: {'Server': 'nginx/1.24.0', 'Date': 'Fri, 19 Jul 2024 18:54:24 GMT', 'Content-Type': 'application/json', 'Content-Length': '72', 'Connection': 'keep-alive'} \nE           Response body: None\n\nsrc\\classes\\global_methods.py:31: AssertionError"}, "description": "\n    Это специальный тест, где мы получим заведомо не верный ответ от сервера.\n    Получить данные пользователя по его user_id\n\n    Ожидаемый результат:\n        Статус-код 201;\n        Время ответа сервера - не превышает 500ms;\n        Схема JSON-ответа соответствует Требованиям;\n        Response header \"Content-Type\": \"application/json\"\n        Response header \"Connection\": \"keep-alive\"\n        Новая запись JSON ответа соответствует тому, что мы отправляли при регистрации + содержит Id созданного юзера.\n\n    Полученный результат: статус код 202 (запрос был принят на обработку, но она не завершена),\n        ключи first_name и last_name не соответствуют тому, что мы ожидали.\n    ", "start": 1721415265141, "stop": 1721415265240, "uuid": "5f075354-6131-4049-aaf9-5799642e47b2", "historyId": "00bb37c3882423b2aef0f244aad4f9d1", "testCaseId": "00bb37c3882423b2aef0f244aad4f9d1", "fullName": "tests.users.test_users#test_issues_get_created_user_by_id_032", "labels": [{"name": "tag", "value": "users"}, {"name": "parentSuite", "value": "tests.users"}, {"name": "suite", "value": "test_users"}, {"name": "host", "value": "DESKTOP-55MLA3F"}, {"name": "thread", "value": "23412-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.users.test_users"}]}